trigger:
- main

pool:
  name: Default

variables:
  project-name-dev: 'ado-openshift'
  project-name-uat: 'ado-openshift'
  image-name: 'dotnet-counter-app'
  image-registry: 'default-route-openshift-image-registry.apps.cluster-kqgjt.kqgjt.sandbox1878.opentlc.com'

stages:
- stage: Build
  displayName: Build and Push Image
  jobs:
  - job: BuildAndPushJob
    displayName: Build and Push Job
    steps:
    - script: dotnet build "app/DotNet.Podman.csproj" -c Release -o podman/app/build
      displayName: 'dotnet build'

    - script: dotnet publish "app/DotNet.Podman.csproj" -c Release -o podman/app/publish
      displayName: 'dotnet publish'

    - script: podman build -t dotnet-counter-app:$(Build.BuildId) -f podman/app/Containerfile && podman images 
      displayName: 'podman build'

    - script: podman tag localhost/$(image-name):$(Build.BuildId) $(image-registry)/$(project-name-dev)/$(image-name):$(Build.BuildId)
      displayName: 'podman tag'

    # using the Docker task extension instead of bash in build agent
    # - task: Docker@2
    #   displayName: 'Push image to OpenShift internal registry'
    #   inputs:
    #     command: 'push'
    #     containerRegistry: 'openshift-registry'
    #     repository: '$(project-name-dev)/$(image-name)'
    #     tags: $(Build.BuildId)

    - script: |
        podman login -u azure-sa -p $(SA_SECRET) $(image-registry) --tls-verify=false
        podman push $(image-registry)/$(project-name-dev)/$(image-name):$(Build.BuildId)
      displayName: 'podman login and push'

    - script: podman image prune -a --filter "until=1h" -f
      displayName: clean up old images

- stage: Deploy
  dependsOn: Build
  condition: succeeded()
  displayName: Deploy into OCP
  jobs:
  - deployment: DeployToOCP
    displayName: Deploy to OCP
    environment: 'ado-openshift'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: cd openshift/app && kustomize edit set image $(image-registry)/$(project-name-dev)/$(image-name)=$(image-registry)/$(project-name-dev)/$(image-name):$(Build.BuildId)
            displayName: Update image tag

          - task: KubernetesManifest@1
            name: bake
            displayName: Bake K8s manifests from kustomization path
            inputs:
              action: bake
              renderType: kustomize
              kustomizationPath: openshift/app

          - task: KubernetesManifest@1
            displayName: Deploy K8s manifests
            inputs:
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'openshift'
              manifests: $(bake.manifestsBundle)
              namespace: $(project-name-dev)